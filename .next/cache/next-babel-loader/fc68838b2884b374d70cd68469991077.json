{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem, Jumbotron, Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Input, Label, NavLink } from 'reactstrap';\nimport { firestore, auth } from '../firebase/fire';\nimport Header from '../components/Navbar';\nconst todoRef = firestore.collection(\"todos\");\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"addTodo\", e => {\n      e.preventDefault();\n      const ref = todoRef.doc();\n      ref.set({\n        task: this.state.todo,\n        createdAt: new Date().getTime(),\n        done: false,\n        id: ref.id\n      }).then(function (docRef) {\n        console.log(docRef);\n      }).catch(function (error) {\n        console.error(\"Error adding document: \", error);\n      });\n    });\n\n    _defineProperty(this, \"updateTodo\", e => {\n      this.toggleUpdate();\n      e.preventDefault();\n      const a = e.target;\n      const b = this.state.update;\n      const ref = todoRef.doc();\n      todoRef.doc(b).update({\n        task: this.username.value\n      }).then(function (docRef) {\n        console.log(docRef);\n      }).catch(function (error) {\n        console.error(\"Error updating document: \", error);\n      });\n    });\n\n    _defineProperty(this, \"deleteTodo\", e => {\n      todoRef.doc(e.target.value).delete().then(function () {\n        console.log(\"Document successfully deleted!\");\n      }).catch(function (error) {\n        console.error(\"Error removing document: \", error);\n      });\n    });\n\n    _defineProperty(this, \"handleUpdate\", e => {\n      this.toggleUpdate();\n      const t = e.target;\n      this.setState({\n        update: t.value\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      const t = e.target;\n      this.setState({\n        [t.name]: t.value\n      });\n    });\n\n    this.state = {\n      todos: [],\n      isUpdate: false,\n      update: ''\n    };\n    this.toggleUpdate = this.toggleUpdate.bind(this);\n  }\n\n  toggleUpdate() {\n    this.setState({\n      isUpdate: !this.state.isUpdate\n    });\n  }\n\n  componentWillMount() {\n    todoRef.orderBy('createdAt').onSnapshot(docSnapShot => {\n      let todos = [];\n      docSnapShot.forEach(doc => {\n        todos.push(doc.data());\n      });\n      this.setState({\n        todos,\n        loaded: true\n      });\n    });\n  }\n\n  renderTodoList() {\n    const ListItem = this.state.todos.map((todo, index) => {\n      return __jsx(\"div\", {\n        className: \"card text-dark mb-3 mt-4 ml-3\",\n        style: {\n          maxWidth: \"50rem\",\n          backgroundColor: \"#e6ff99\"\n        }\n      }, __jsx(\"div\", {\n        className: \"card-content\"\n      }, __jsx(\"div\", {\n        className: \"card-body\"\n      }, __jsx(\"p\", {\n        className: \"card-text \"\n      }, __jsx(\"h3\", null, todo.task)), __jsx(\"button\", {\n        value: todo.id,\n        className: \"btn btn-sm btn-danger\",\n        onClick: this.deleteTodo,\n        style: {\n          float: \"right\"\n        }\n      }, \"X\"), __jsx(\"button\", {\n        value: todo.id,\n        className: \"btn btn-sm btn-info\",\n        onClick: this.handleUpdate,\n        style: {\n          float: \"right\"\n        }\n      }, \"Update\"), __jsx(Modal, {\n        isOpen: this.state.isUpdate,\n        toggle: this.toggleUpdate\n      }, __jsx(ModalHeader, {\n        toggle: this.toggleUpdate\n      }, \"Update\"), __jsx(ModalBody, null, __jsx(Form, {\n        onSubmit: this.updateTodo\n      }, __jsx(FormGroup, null, __jsx(Label, {\n        htmlFor: \"username\"\n      }, \"Task\"), __jsx(Input, {\n        type: \"text\",\n        id: \"username\",\n        name: \"username\",\n        innerRef: input => this.username = input\n      })), __jsx(Button, {\n        type: \"submit\",\n        value: todo.id,\n        color: \"primary\"\n      }, \"Update\")))))));\n    });\n    return __jsx(\"div\", null, ListItem);\n  }\n\n  render() {\n    console.log(this.state);\n    console.log(this.state.notes);\n    return __jsx(\"div\", {\n      className: \"App\"\n    }, __jsx(Header, null), __jsx(\"form\", {\n      onSubmit: this.addTodo\n    }, __jsx(\"div\", {\n      className: \"input-group\"\n    }, __jsx(\"input\", {\n      type: \"text\",\n      onChange: this.handleChange,\n      name: \"todo\",\n      style: {\n        backgroundColor: \"#E2CEEE\",\n        marginTop: \"20px\",\n        marginLeft: \"8px\"\n      }\n    }), __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      type: \"submit\",\n      onClick: this.addTodo,\n      style: {\n        marginTop: \"20px\",\n        marginLeft: \"8px\"\n      }\n    }, \"Add Todo\"))), this.renderTodoList());\n  }\n\n}\n\nexport default App;","map":null,"metadata":{},"sourceType":"module"}