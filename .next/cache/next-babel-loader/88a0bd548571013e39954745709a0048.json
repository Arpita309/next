{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem, Jumbotron, Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Input, Label, NavLink } from 'reactstrap';\nimport { firestore, auth } from '../firebase/fire';\nimport Header from '../components/Navbar';\nvar todoRef = firestore.collection(\"todos\");\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"addTodo\", function (e) {\n      e.preventDefault();\n      var ref = todoRef.doc();\n      ref.set({\n        task: _this.state.todo,\n        createdAt: new Date().getTime(),\n        done: false,\n        id: ref.id\n      }).then(function (docRef) {\n        console.log(docRef);\n      })[\"catch\"](function (error) {\n        console.error(\"Error adding document: \", error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateTodo\", function (e) {\n      _this.toggleUpdate();\n\n      e.preventDefault();\n      var a = e.target;\n      var b = _this.state.update;\n      var ref = todoRef.doc();\n      todoRef.doc(b).update({\n        task: _this.username.value\n      }).then(function (docRef) {\n        console.log(docRef);\n      })[\"catch\"](function (error) {\n        console.error(\"Error updating document: \", error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteTodo\", function (e) {\n      todoRef.doc(e.target.value)[\"delete\"]().then(function () {\n        console.log(\"Document successfully deleted!\");\n      })[\"catch\"](function (error) {\n        console.error(\"Error removing document: \", error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleUpdate\", function (e) {\n      _this.toggleUpdate();\n\n      var t = e.target;\n\n      _this.setState({\n        update: t.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      var t = e.target;\n\n      _this.setState(_defineProperty({}, t.name, t.value));\n    });\n\n    _this.state = {\n      todos: [],\n      isUpdate: false,\n      update: ''\n    };\n    _this.toggleUpdate = _this.toggleUpdate.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"toggleUpdate\",\n    value: function toggleUpdate() {\n      this.setState({\n        isUpdate: !this.state.isUpdate\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      todoRef.orderBy('createdAt').onSnapshot(function (docSnapShot) {\n        var todos = [];\n        docSnapShot.forEach(function (doc) {\n          todos.push(doc.data());\n        });\n\n        _this2.setState({\n          todos: todos,\n          loaded: true\n        });\n      });\n    }\n  }, {\n    key: \"renderTodoList\",\n    value: function renderTodoList() {\n      var _this3 = this;\n\n      var ListItem = this.state.todos.map(function (todo, index) {\n        return __jsx(\"div\", {\n          className: \"card text-dark mb-3 mt-4 ml-3\",\n          style: {\n            maxWidth: \"50rem\",\n            backgroundColor: \"#e6ff99\"\n          }\n        }, __jsx(\"div\", {\n          className: \"card-content\"\n        }, __jsx(\"div\", {\n          className: \"card-body\"\n        }, __jsx(\"p\", {\n          className: \"card-text \"\n        }, __jsx(\"h3\", null, todo.task)), __jsx(\"button\", {\n          value: todo.id,\n          className: \"btn btn-sm btn-danger\",\n          onClick: _this3.deleteTodo,\n          style: {\n            \"float\": \"right\"\n          }\n        }, \"X\"), __jsx(\"button\", {\n          value: todo.id,\n          className: \"btn btn-sm btn-info\",\n          onClick: _this3.handleUpdate,\n          style: {\n            \"float\": \"right\"\n          }\n        }, \"Update\"), __jsx(Modal, {\n          isOpen: _this3.state.isUpdate,\n          toggle: _this3.toggleUpdate\n        }, __jsx(ModalHeader, {\n          toggle: _this3.toggleUpdate\n        }, \"Update\"), __jsx(ModalBody, null, __jsx(Form, {\n          onSubmit: _this3.updateTodo\n        }, __jsx(FormGroup, null, __jsx(Label, {\n          htmlFor: \"username\"\n        }, \"Task\"), __jsx(Input, {\n          type: \"text\",\n          id: \"username\",\n          name: \"username\",\n          innerRef: function innerRef(input) {\n            return _this3.username = input;\n          }\n        })), __jsx(Button, {\n          type: \"submit\",\n          value: todo.id,\n          color: \"primary\"\n        }, \"Update\")))))));\n      });\n      return __jsx(\"div\", null, ListItem);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state);\n      console.log(this.state.notes);\n      return __jsx(\"div\", {\n        className: \"App\"\n      }, __jsx(Header, null), __jsx(\"form\", {\n        onSubmit: this.addTodo\n      }, __jsx(\"div\", {\n        className: \"input-group\"\n      }, __jsx(\"input\", {\n        type: \"text\",\n        onChange: this.handleChange,\n        name: \"todo\",\n        style: {\n          backgroundColor: \"#E2CEEE\",\n          marginTop: \"20px\",\n          marginLeft: \"8px\"\n        }\n      }), __jsx(\"button\", {\n        className: \"btn btn-primary\",\n        type: \"submit\",\n        onClick: this.addTodo,\n        style: {\n          marginTop: \"20px\",\n          marginLeft: \"8px\"\n        }\n      }, \"Add Todo\"))), this.renderTodoList());\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":null,"metadata":{},"sourceType":"module"}