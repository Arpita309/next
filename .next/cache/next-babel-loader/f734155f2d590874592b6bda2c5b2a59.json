{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\at\\\\Desktop\\\\todo-next\\\\pages\\\\Note.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { firestore } from \"../firebase/fire\"; //import { SpellInput } from \"./SpellInput\";\n//import { Card } from \"reactstrap\";doc\n\nimport Card from './main';\n\nfunction App() {\n  var _this = this;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      notes = _React$useState2[0],\n      setNotes = _React$useState2[1]; // const [newSpellName, setNewSpellName] = React.useState();\n\n\n  React.useEffect(function () {\n    var fetchData = function fetchData() {\n      var data;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(firestore.collection(\"todos\").get());\n\n            case 2:\n              data = _context.sent;\n              firestore.collection(\"todos\").get().then(function (querySnapshot) {\n                querySnapshot.docs.forEach(function (doc) {\n                  var info = doc.data().todo;\n                  var id = doc.id;\n                  console.log(info);\n                });\n              });\n              setNotes(data.docs.map(function (doc) {\n                return _objectSpread({}, doc.data(), {\n                  id: doc.id\n                });\n              }));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchData();\n  }, []); // const onCreate = () => {\n  // const db = firebase.firestore();\n  //  db.collection(\"spells\").add({ name: newSpellName });\n  // };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, notes.map(function (todo) {\n    return __jsx(\"div\", {\n      key: notes.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, __jsx(Card, {\n      spells: todo,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }));\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/at/Desktop/todo-next/pages/Note.js"],"names":["React","firestore","Card","App","useState","notes","setNotes","useEffect","fetchData","collection","get","data","then","querySnapshot","docs","forEach","doc","info","todo","id","console","log","map"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,SAAR,QAAwB,kBAAxB,C,CACA;AACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAAA,wBACaH,KAAK,CAACI,QAAN,CAAe,EAAf,CADb;AAAA;AAAA,MACNC,KADM;AAAA,MACCC,QADD,wBAEd;;;AAECN,EAAAA,KAAK,CAACO,SAAN,CAAgB,YAAM;AACpB,QAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEGP,SAAS,CAACQ,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,EAFH;;AAAA;AAEVC,cAAAA,IAFU;AAGhBV,cAAAA,SAAS,CAACQ,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,GAAoCE,IAApC,CAAyC,UAAAC,aAAa,EAAE;AACtDA,gBAAAA,aAAa,CAACC,IAAd,CAAmBC,OAAnB,CAA2B,UAAAC,GAAG,EAAE;AAC9B,sBAAMC,IAAI,GAACD,GAAG,CAACL,IAAJ,GAAWO,IAAtB;AACA,sBAAMC,EAAE,GAACH,GAAG,CAACG,EAAb;AACAC,kBAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACF,iBAJA;AAIG,eALL;AAOAX,cAAAA,QAAQ,CAACK,IAAI,CAACG,IAAL,CAAUQ,GAAV,CAAc,UAAAN,GAAG;AAAA,yCAAUA,GAAG,CAACL,IAAJ,EAAV;AAAsBQ,kBAAAA,EAAE,EAAEH,GAAG,CAACG;AAA9B;AAAA,eAAjB,CAAD,CAAR;;AAVgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAYAX,IAAAA,SAAS;AACV,GAdD,EAcG,EAdH,EAJa,CAoBd;AACE;AACD;AACD;;AAEC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGH,KAAK,CAACiB,GAAN,CAAU,UAAAJ,IAAI;AAAA,WACb;AAAK,MAAA,GAAG,EAAEb,KAAK,CAACc,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,MAAM,EAAED,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADa;AAAA,GAAd,CAHH,CADF;AAWD;;AAED,eAAef,GAAf","sourcesContent":["import React from \"react\";\r\n\r\nimport {firestore} from \"../firebase/fire\";\r\n//import { SpellInput } from \"./SpellInput\";\r\n//import { Card } from \"reactstrap\";doc\r\nimport Card from './main'\r\n\r\nfunction App() {\r\n  const [notes, setNotes] = React.useState([]);\r\n // const [newSpellName, setNewSpellName] = React.useState();\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = async () => {\r\n      \r\n      const data = await firestore.collection(\"todos\").get();\r\n      firestore.collection(\"todos\").get().then(querySnapshot=>{\r\n        querySnapshot.docs.forEach(doc=>{\r\n          const info=doc.data().todo;\r\n          const id=doc.id;\r\n          console.log(info);\r\n       }) })\r\n      \r\n      setNotes(data.docs.map(doc => ({ ...doc.data(), id: doc.id })));\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n // const onCreate = () => {\r\n   // const db = firebase.firestore();\r\n  //  db.collection(\"spells\").add({ name: newSpellName });\r\n // };\r\n\r\n  return (\r\n    <div>\r\n      \r\n     \r\n      {notes.map(todo => (\r\n        <div key={notes.id}>\r\n          <Card spells={todo} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}